import random
import string
import time
from colorama import Fore, Style
from dataclasses import dataclass
from . import BaseVisualConfig, BaseHackSimulator

@dataclass
class PentestConfig(BaseVisualConfig):
    """Configuration class for penetration testing visual effects.
    
    Attributes:
        matrix_delay_range (tuple): Range of delays (min, max) for matrix effect. Defaults to (0.01, 0.5).
        bright_char_chance (float): Probability of a character being bright. Defaults to 0.1.
        hex_addr_chance (float): Probability of showing a hex address. Defaults to 0.05.
        red_bright_chance (float): Probability of a bright character being red vs white. Defaults to 0.3.
    """
    matrix_delay_range: tuple = (0.01, 0.5)
    bright_char_chance: float = 0.1
    hex_addr_chance: float = 0.05
    red_bright_chance: float = 0.3

    def get_char_set(self) -> str:
        """Get the full character set used for matrix effect.
        
        Returns:
            str: Combined string of Japanese, Russian, Chinese, hex digits and special characters.
        """
        # Get Japanese characters
        japanese = "アァカサタナハマヤャラワガザダバパイィキシチニヒミリヰギジヂビピウゥクスツヌフムユュルグズブヅプエェケセテネヘメレヱゲゼデベペオォコソトノホモヨョロヲゴゾドボポヴッン"
        # Get basic Latin, Cyrillic and CJK ranges
        russian = ''.join(chr(i) for i in range(0x0400, 0x04FF))  # Cyrillic block
        chinese = ''.join(chr(i) for i in range(0x4E00, 0x4F00))  # Basic CJK block
        # Combine all character sets with hex digits and special chars
        return japanese + russian + chinese + string.hexdigits + "@#$%&*<>[]{}~^"

class PentestHack(BaseHackSimulator):
    """Simulates a penetration testing hacking sequence with matrix rain effects and realistic hacking messages."""

    def get_config(self) -> PentestConfig:
        """Get the configuration for penetration testing visual effects.
        
        Returns:
            PentestConfig: Configuration object with pentest-specific settings.
        """
        return PentestConfig()

    def get_init_messages(self) -> list[str]:
        """Get initialization messages displayed during startup.
        
        Returns:
            list[str]: List of penetration testing initialization messages.
        """
        return [
            "ESTABLISHING TOR CIRCUIT (3 HOPS)",
            "LOADING EXPLOIT FRAMEWORKS", 
            "SCANNING TARGET PORTS: 22, 80, 443, 3389",
            "FINGERPRINTING OS AND SERVICES",
            "INITIALIZING MEMORY FORENSICS"
        ]

    def get_hack_messages(self) -> list[str]:
        """Get messages displayed during the hacking sequence.
        
        Returns:
            list[str]: List of realistic penetration testing progress messages.
        """
        return [
            "PORT 22 OPEN - ATTEMPTING SSH BRUTEFORCE WITH CUSTOM WORDLIST...",
            "DETECTED VULNERABLE VERSION: OpenSSL 1.0.1f [CVE-2014-0160]...",
            "DUMPING PROCESS MEMORY AT OFFSET 0x7FFF5B3D8000...",
            "INTERCEPTING UNENCRYPTED PACKETS ON 192.168.1.0/24...",
            "ATTEMPTING BUFFER OVERFLOW EXPLOIT [NOP SLED: 90909090]...",
            "BYPASSING 2FA WITH TIMING ATTACK...",
            "ESCALATING PRIVILEGES VIA KERNEL EXPLOIT [CVE-2023-0001]...",
            "ESTABLISHING REVERSE SHELL ON PORT 4444...",
            "LATERAL MOVEMENT TO 10.0.0.5 - DUMPING SAM HASHES...",
            "EXFILTRATING DATA VIA DNS TUNNELING...",
            "INJECTING SHELLCODE INTO RUNNING PROCESS [PID: 4528]...",
            "BRUTE-FORCING WPA3 HANDSHAKE CAPTURED FROM TARGET AP...",
            "DEPLOYING ROOTKIT TO MAINTAIN PERSISTENCE...",
            "POISONING ARP CACHE FOR MAN-IN-THE-MIDDLE ATTACK...",
            "FUZZING SOAP API ENDPOINTS FOR SQL INJECTION...",
            "CRACKING RSA PRIVATE KEY WITH QUANTUM ALGORITHM...",
            "EXPLOITING RACE CONDITION IN AUTHENTICATION MODULE...",
            "PIVOTING THROUGH COMPROMISED IOT DEVICES...",
            "DEPLOYING ZERO-DAY EXPLOIT [CVE-2024-XXXX]...",
            "BYPASSING WAF WITH OBFUSCATED XSS PAYLOAD...",
            "INTERCEPTING OAUTH2 TOKENS VIA SESSION HIJACKING...",
            "EXPLOITING DESERIALIZATION VULNERABILITY IN JAVA APP...",
            "SCANNING DOCKER REGISTRY FOR EXPOSED CREDENTIALS...",
            "EXECUTING SUPPLY CHAIN ATTACK VIA NPM PACKAGE...",
            "BYPASSING WINDOWS DEFENDER WITH POLYMORPHIC SHELLCODE..."
        ]

    def print_banner(self) -> None:
        """Print the penetration testing themed banner with dramatic effect."""
        banner = """
    ╔══════════════════════════════════════════════════════════╗
    ║             ADVANCED PENETRATION SUITE v2.3              ║
    ║        [STATUS: AUTHORIZED] - SESSION ID: 0xF7A9D        ║
    ╚══════════════════════════════════════════════════════════╝
    """
        self.visual.dramatic_print(banner, Fore.GREEN, 0.001)

    def generate_matrix_line(self) -> str:
        """Generate a single line of matrix rain effect with random colored characters.
        
        Returns:
            str: A colored string containing random characters and hex addresses.
        """
        chars = self.config.get_char_set()
        line = ''.join(random.choice(chars) for _ in range(self.config.line_length))
        colored_line = ''
        
        for char in line:
            if random.random() < self.config.hex_addr_chance:
                addr = f"0x{random.randint(0, 16**8):08x}"
                colored_line += Style.BRIGHT + Fore.YELLOW + addr + " "
            elif random.random() < self.config.bright_char_chance:
                if random.random() < self.config.red_bright_chance:
                    colored_line += Style.BRIGHT + Fore.RED + char
                else:
                    colored_line += Style.BRIGHT + Fore.WHITE + char
            else:
                colored_line += Style.NORMAL + Fore.GREEN + char
        
        return colored_line + Style.RESET_ALL

    def run_matrix_effect(self) -> None:
        """Run the matrix rain effect animation with penetration testing messages.
        
        Continuously generates matrix rain lines and intersperses them with timestamped hack messages.
        """
        while True:
            # Matrix rain effect
            for _ in range(random.randint(1, 3)):
                print(self.generate_matrix_line())
                time.sleep(random.uniform(*self.config.matrix_delay_range))
            
            msg = random.choice(self.hack_messages)
            timestamp = time.strftime("%H:%M:%S", time.localtime())
            print(Fore.CYAN + Style.BRIGHT + f"\r[{timestamp}] {msg}", end="")
            time.sleep(1.2)

if __name__ == "__main__":
    hack = PentestHack()
    hack.run() 